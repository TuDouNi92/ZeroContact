plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
    modImplementation("top.theillusivec4.curios:curios-forge:5.9.1+1.20.1")
//    modCompileOnly("top.theillusivec4.curios:curios-forge:5.9.1+1.20.1")
    modImplementation('curse.maven:timeless-and-classics-zero-1028108:5722050')
//    modCompileOnly('curse.maven:timeless-and-classics-zero-1028108:5722050')
    modImplementation files('libs/curtain-mc1.20.1-1.3.2.jar')
    forgeRuntimeLibrary('org.luaj:luaj-jse:3.0.1')
    forgeRuntimeLibrary('org.apache.commons:commons-math3:3.6.1')
//    modRuntimeOnly files("libs/Jade-1.20.1-Forge-11.12.3.jar")
    modImplementation ('software.bernie.geckolib:geckolib-forge-1.20.1:4.2.1')
//    modCompileOnly('software.bernie.geckolib:geckolib-forge-1.20.1:4.2.1')

    implementation("com.eliotlash.mclib:mclib:20")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
